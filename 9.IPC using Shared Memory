#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>

int main(){
    key_t key = ftok("/tmp", 'R');
    int shmid = shmget(key, 1024, IPC_CREAT | 0666);
    if (shmid < 0){ perror("shmget"); return 1; }
    char *shm = (char*) shmat(shmid, NULL, 0);
    if (shm == (char*) -1){ perror("shmat"); return 1; }

    pid_t pid = fork();
    if (pid < 0){ perror("fork"); return 1; }
    else if (pid == 0){
        // child: write
        const char *msg = "Hello from child via shared memory";
        strncpy(shm, msg, 1024);
        printf("Child wrote message and exits.\n");
        _exit(0);
    } else {
        // parent: wait briefly and read
        sleep(1);
        printf("Parent reads: %s\n", shm);
        shmdt(shm);
        shmctl(shmid, IPC_RMID, NULL);
    }
    return 0;
}
