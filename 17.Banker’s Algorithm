#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, m;
    
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

    int alloc[n][m], max[n][m], need[n][m], avail[m];

    printf("\nEnter Allocation matrix (%d x %d):\n", n, m);
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
            scanf("%d", &alloc[i][j]);

    printf("\nEnter Maximum matrix (%d x %d):\n", n, m);
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
            scanf("%d", &max[i][j]);

    printf("\nEnter Available resources vector (%d):\n", m);
    for(int j=0;j<m;j++)
        scanf("%d", &avail[j]);

    // Calculate Need matrix
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
            need[i][j] = max[i][j] - alloc[i][j];

    int finish[n];
    for(int i=0;i<n;i++) finish[i] = 0;

    int safeSeq[n];
    int work[m];
    for(int j=0;j<m;j++) work[j] = avail[j];

    int count = 0;
    while(count < n) {
        int found = 0;
        for(int p=0; p<n; p++) {
            if(finish[p]) continue;

            int j;
            for(j=0; j<m; j++)
                if(need[p][j] > work[j])
                    break;

            if(j == m) {
                // Process p can be allocated
                for(int k=0;k<m;k++) work[k] += alloc[p][k];
                safeSeq[count++] = p;
                finish[p] = 1;
                found = 1;
            }
        }
        if(!found) break; // no suitable process found
    }

    // Check if all processes finished
    int safe = 1;
    for(int i=0;i<n;i++)
        if(finish[i] == 0) safe = 0;

    if(safe) {
        printf("\nSystem is in a SAFE state.\nSafe sequence: ");
        for(int i=0;i<n;i++) {
            printf("P%d", safeSeq[i]);
            if(i < n-1) printf(" -> ");
        }
        printf("\n");
    } else {
        printf("\nSystem is in an UNSAFE state! No safe sequence.\n");
    }

    return 0;
}
